import org.vu.contest.ContestSubmission;
import org.vu.contest.ContestEvaluation;

import java.util.Random;
import java.util.Properties;

import java.util.LinkedList<E>;

final int POP_SIZE = 10000;
final int INPUTS   = 10;
final double MAX_RANGE = 5;
final double MIN_RANGE = -5;
final float PC = 0.7;
final float PM = 1/POP_SIZE;

public class EASubmission implements ContestSubmission
{
	private Random rnd_;
	private ContestEvaluation evaluation_;
	private int evaluations_limit_;

	public EASubmission()
	{
		rnd_ = new Random();
	}

	public void setSeed(long seed)
	{
		// Set seed of algortihms random process
		rnd_.setSeed(seed);
	}

	public void setEvaluation(ContestEvaluation evaluation)
	{
		// Set evaluation problem used in the run
		evaluation_ = evaluation;

		// Get evaluation properties
		Properties props = evaluation.getProperties();
		evaluations_limit_ = Integer.parseInt(props.getProperty("Evaluations"));
		boolean isMultimodal = Boolean.parseBoolean(props.getProperty("Multimodal"));
		boolean hasStructure = Boolean.parseBoolean(props.getProperty("GlobalStructure"));
		boolean isSeparable = Boolean.parseBoolean(props.getProperty("Separable"));

		// Change settings(?)
		if(isMultimodal){
			// Do sth
		}else{
			// Do sth else
		}
	}

  private void initiate_parents(double[][] parents){
    Random r = new Random();
    for(int i=0;i<POP_SIZE;i++){
      for(int j=0;j<INPUTS;j++){
        parents[i][j] = RANGE_MIN + (RANGE_MAX - RANGE_MIN) * r.nextDouble();
      }
    }
  }

  private void evaluate_children(double[][] children){
    for(int i=0;i<POP_SIZE;i++){
      children[i][INPUTS] = evaluation_.evaluate(child);
    }
  }

  private void shuffle_array(double[][] array){
    Random r = new Random();
    for(int i=array.length -1;i>0;i--){
      int index = r.nextInt(i+1);
      double[] a = array[index];
      array[index] = array[i];
      array[i] = a;
     }
  }

  private void swap_tails(double[] parent1, double[] parent2, double[] child1, double[] child2, int split){
    for(int i=0;i<split;i++){
      child1[i] = parent1[i];
      child2[i] = parent2[i];
    }
    for(i=split;i<INPUTS;i++){
      child1[i] = parent2[i];
      child2[i] = parent1[i];
    }
  }


  private double[][] crossover(double[][] parents){
    result = new double[POP_SIZE][INPUTS+1];
    Random r = new Random(); 
    for(int i=0;i<POP_SIZE;i+=2){
      if(r.nextFloat() <= PC){
        split = r.nextInt(INPUTS);
        swap_tails(parents[i],parents[i+1], result[i], result[i+1], split);
      }else{
        result[i] = parents[i];
        result[i+1] = parents[i+1];
      }
    }
  }

  private void mutate(double[][] children){
    Random r = new Random();
    for(int i=0;i<POP_SIZE;i++){
      for(int j=0;j<INPUTS;j++){
        if(r.nextFloat() <= PM){
          children[i][j] = RANGE_MIN + (RANGE_MAX - RANGE_MIN) * r.nextDouble();
        }
      }
    }
  }

  private double[][] concatenate(double[][] less, double pivot, double[][] more){
    result = new double[less.length+1+more.length][INPUTS+1];
    for(int i=0;i<less.length;i++){
      result[i] = less[i];
    }
    result[less.length] = pivot;
    for(i=0;i<more.length;i++){
      result[less.length+1+i] = more[i];
    }

    return result;
  }

  private double[][] concatenate(double[][] first, double[][] second){
    result = new double[first.length+second.length][INPUTS+1];
    for(int i=0;i<first.length;i++){
      result[i] = first[i];
    }
    for(i=0;i<second.length;i++){
      result[first.length+i] = second[i];
    }
    return result;
  }




  //Quicksort on fitness
  private double[][] sort_by_fitness(double[][] children){
    if(children.length <= 1){
      return children;
    }
    double pivot = children[0][INPUTS];
    LinkedList less = new LinkedList<double[][]>;
    LinkedList greater = new LinkedList<double[][]>;
    for(int i=0;i<children.length;i++){
      if(children[i][INPUTS] <= pivot){
        less.add(children[i]);
      }else{
        greater.add(children[i]);
      }
    }
    return concatenate(sort_by_fitness(less.toArray(new double[0][0])), pivot, sort_by_fitness(greater.toArray(new double[0][0])));
  }





  private double[][] select_parents(parents,children){
    Random r = new Random();
    result = new double[POP_SIZE][INPUTS+1];

    population = concatenate(parents, children);
    population = sort_by_fitness(population);
    for(int i=0;i<POP_SIZE;i++){
      roulette_wheel = r.nextFloat();
      if(roulette_wheel < 0.5){
        pick = r.nextInt(POP_SIZE/10); 
        result[i] = population[pick]; 
      }else if(roulette_wheel < 0.8){
        pick = r.nextInt(POP_SIZE/5) + POP_SIZE/10;
        result[i] = population[pick];
      }else if(roulette_wheel < 0.95){
        pick = r.nextInt(POP_SIZE/4) + POP_SIZE/4;
        result[i] = population[pick];
      }else{
        pick = r.nextInt(POP_SIZE/2) + POP_SIZE/2;
        result[i] = population[pick];
      }
    }

    return result;
  }


	public void run()
	{
    parents = new double[POP_SIZE][INPUTS + 1];
    children = new double[POP_SIZE][INPUTS + 1];
    //The extra field after the inputs will be used for storing the fitness
    initiate_parents(parents);
    children = crossover(parents);
    mutate(children);
    evaluate(parents);
    evaluate(children); 

		int evals = 0;
		while(evals<evaluations_limit_){
      parents = select_parents(parents,children);
      shuffle_array(parents);
      children = crossover(parents);
      mutate(children);
      evaluate_children(children);
			evals++;
		}
	}
}

